#!/usr/bin/env python3
# File last changed: <2022-06-15 Wed 11:59:29>

"""@package docstring
Return relative dates.

Usage: pdate [options]

-h --help                      show this
-o --ordinal ORDINAL           specifies which day of the month [default: first]
-a --dayofweek DAY             show date for this day of the week
-r --referencemonth MONTH      specifies which reference month to use where 0==current [default: 0]
-t --text TEXT                 interpret TEXT as some date and display that date
-f --format FORMAT             format the resulting date using FORMAT [default: %Y-%m-%d]
-d --dump                      Dump option settings
-v --version                   Display program version

$ pdate [-o ORDINAL] [-a DAY] [-r MONTH] ] [-f FORMAT] [-d] [-v] 
$ pdate [-t TEXT] [-f FORMAT] [-d] [-v] 

Examples:
$ pdate -o 2 -a Tue        # second Tuesday of the month
$ pdate -o 3 -a Friday     # third Friday of the month
$ pdate -o 2 -a Tu -r 1    # second Tuesday of the month with respect to next month


Text can be something like one of these:
$ pdate -t 'last day of previous month'
$ pdate -t 'second Tueday of the month'
$ pdate -t '3rd Fri of the month'
"""

from docopt import docopt
import sys
from datetime import date, timedelta
from dateutil import relativedelta
import calendar


class PastDOWInCurrentMonth(Exception):
    pass


class UsageError(Exception):
    pass


def mapDayOfWeek(dow):
    "Return Calendar's enum corresponding to the day of week DOW."
    daysOfTheWeek = {  # And their aliases
        "sunday": calendar.SUNDAY,
        "monday": calendar.MONDAY,
        "tuesday": calendar.TUESDAY,
        "wednesday": calendar.WEDNESDAY,
        "thursday": calendar.THURSDAY,
        "friday": calendar.FRIDAY,
        "saturday": calendar.SATURDAY,

        "sun": calendar.SUNDAY,
        "mon": calendar.MONDAY,
        "tue": calendar.TUESDAY,
        "tues": calendar.TUESDAY,
        "wed": calendar.WEDNESDAY,
        "thu": calendar.THURSDAY,
        "thur": calendar.THURSDAY,
        "fri": calendar.FRIDAY,
        "sat": calendar.SATURDAY,

        "su": calendar.SUNDAY,
        "mo": calendar.MONDAY,
        "tu": calendar.TUESDAY,
        "we": calendar.WEDNESDAY,
        "th": calendar.THURSDAY,
        "fr": calendar.FRIDAY,
        "sa": calendar.SATURDAY
    }
    dow = dow.lower()
    if dow in daysOfTheWeek:
        return daysOfTheWeek[dow]
    else:
        raise UsageError("Unknown day of week: '{}'".format(dow))


def nthDayOfMonth(nth, dow, referenceMonth=0):
    "Return the nearest NTH DOW (day) of the month that has not past. If REFERENCEMONTH is non zero, consider that month."

    # print("nthDayOfMonth: {} {} {}".format(nth, dow, referenceMonth))

    def dowEntriesInMonth(year, month, dow):
        "Return a list from DAYLIST (a list of tuples: (year, month, date, day-of-week)) all the entries for MONTH that match DOW."
        cal = calendar.Calendar()
        dateList = list(cal.itermonthdays4(year, month))

        return list(filter(lambda x: x[0] == year and x[1] == month and x[3] == dow, dateList))

    def firstOfNextMonth(d):
        "Return the date of the first day of the next month after D."
        return(date(d.year + (d.month == 12), d.month+1 - (12*(d.month == 12)), 1))

    def nthDayOfMonthHelper(nth, dow, year, month, referenceMonth):
        "Return the NTH DOW for the given YEAR/MONTH."

        daysOfTheWeekNameMap = {
            0: "Monday",
            1: "Tuesday",
            2: "Wednesday",
            3: "Thursday",
            4: "Friday",
            5: "Saturday",
            6: "Sunday"
        }

        d = date(year, month, 1) + \
            relativedelta.relativedelta(months=referenceMonth)
        entries = dowEntriesInMonth(d.year, d.month, dow)
        try:
            entry = entries[nth-1]
        except IndexError:
            raise UsageError(
                "The month ({}/{}) does not contain {} {}s!".format(year, month, nth, daysOfTheWeekNameMap[dow]))

        target = date(entry[0], entry[1], entry[2])
        if referenceMonth == 0:
            if target >= date.today():
                return target
            else:
                raise PastDOWInCurrentMonth
        else:
            return target

    d = date.today()

    try:
        target = nthDayOfMonthHelper(nth, dow, d.year, d.month, referenceMonth)
        return target
    except PastDOWInCurrentMonth:
        fonm = firstOfNextMonth(d)
        try:
            return nthDayOfMonthHelper(nth, dow, fonm.year, fonm.month, referenceMonth)
        except UsageError as ue:
            raise(ue)


def dateFromDescription(description, format):
    "Return date corresponding to DESCRIPTION formatted according to FORMAT."
    import re

    d = date.today()

    ordinalDayReferences = {
        "first": 1,
        "second": 2,
        "third": 3,
        "fourth": 4,
        "fifth": 5,
        "1st": 1,
        "2nd": 2,
        "3rd": 3,
        "4th": 4,
        "5th": 5
    }

    m1 = re.search(r"(\w+)\s+(\w+)\s+of\s+(the\s+)?month",
                   description, re.IGNORECASE)
    m2 = re.search(r"first\s+day\s+of\s+(the\s+)?previous\s+month",
                   description, re.IGNORECASE)
    m3 = re.search(r"last\s+day\s+of\s+(the\s+)?previous\s+month",
                   description, re.IGNORECASE)
    if m1:
        try:
            ord = ordinalDayReferences[m1.group(1).lower()]
        except:
            raise UsageError("No known cardinality '{}'".format(m1.group(1)))

        try:
            dow = mapDayOfWeek(m1.group(2).lower())
        except:
            raise UsageError("No such day of week '{}'".format(m1.group(2)))

        try:
            return nthDayOfMonth(ord, dow).strftime(format)
        except UsageError as ue:
            raise UsageError(ue)
    elif m2:
        d2 = date(d.year, d.month, 1) - relativedelta.relativedelta(months=1)
        return d2.strftime(format)
    elif m3:
        d2 = date(d.year, d.month, 1) - relativedelta.relativedelta(days=1)
        return d2.strftime(format)
    else:
        raise UsageError(
            "'{}' not understood.\n{}".format(description, __doc__))


def dateFromParams(ordinal, dayOfWeek, referenceMonth, format):
    "Return date corresponding to ORDINAL, DAYOFWEEK and REFERENCEMONTH formatted according to FORMAT."
    if ordinal is None:
        raise UsageError("ordinal not provided")
    else:
        ord = int(ordinal)
    if dayOfWeek is None:
        raise UsageError("dayOfWeek not provided")
    else:
        dow = mapDayOfWeek(dayOfWeek)
    if referenceMonth is None:
        raise UsageError("referenceMonth not provided")
    else:
        ref = int(referenceMonth)

    try:
        return nthDayOfMonth(ord, dow, ref).strftime(format)
    except UsageError as ue:
        raise UsageError(ue)


if __name__ == '__main__':
    try:
        ARGUMENTS = docopt(__doc__, version='pdate v0.1')
        if ARGUMENTS['--dump']:
            print("ARGUMENTS")
            print(ARGUMENTS)
            print("\n")
    except Exception as exc:
        exit("Error: {}".format(exc))

    text = ARGUMENTS['--text']
    format = ARGUMENTS['--format']
    try:
        if text is not None:
            print(dateFromDescription(text, format))
        else:
            ordinal = ARGUMENTS['--ordinal']
            dayOfWeek = ARGUMENTS['--dayofweek']
            referenceMonth = ARGUMENTS['--referencemonth']
            print(dateFromParams(ordinal, dayOfWeek, referenceMonth, format))
    except UsageError as ue:
        print("UsageError: {}".format(ue))
        sys.exit(1)


# Local Variables:
# time-stamp-line-limit: 1000
# time-stamp-format: "<%Y-%02m-%02d %3a %02H:%02M:%02S>"
# time-stamp-active: t
# time-stamp-start: "File last changed:[ \t]+"
# time-stamp-end: "$"
# End:
